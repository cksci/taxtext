#!/usr/bin/env python3
import yfinance as yf
import pandas as pd
import sys
import warnings
import re
from datetime import datetime, timedelta

symbol = sys.argv[1]

if len(sys.argv) ==  2:
    
    date_str  = datetime.today().date()
    date2_str = datetime.today().date()

elif len(sys.argv) == 3:

    date_arg  = sys.argv[2]
    date2_str = datetime.today().date()
    #date_str  = datetime.strptime(date_arg, "%Y-%m-%d").date()
    date_str  = datetime.strptime(date_arg, "%m/%d/%Y").date()

elif len(sys.argv) == 4:

    date_arg  = sys.argv[2]
    date2_arg = sys.argv[3]

    #date_str  = datetime.strptime(date_arg, "%Y-%m-%d").date()
    #date2_str = datetime.strptime(date2_arg, "%Y-%m-%d").date()
    date_str  = datetime.strptime(date_arg, "%m/%d/%Y").date()
    date2_str = datetime.strptime(date2_arg, "%m/%d/%Y").date()

#print(f"{date_str} to {date2_str}")

start_date = pd.to_datetime(date_str)
end_date = pd.to_datetime(date2_str)
#print(start_date)
#print(end_date)

ticker = yf.Ticker(symbol)
currency = ticker.get_info().get("currency")

fetch_start = start_date - pd.Timedelta(days=3)
fetch_end = end_date + pd.Timedelta(days=3)

df = ticker.history(start=fetch_start, end=fetch_end)
#print(df)

dividends       = ticker.dividends
dividends.index = dividends.index.tz_localize(None)

div = ticker.info.get("dividendRate", None)
if div is None:
    one_year_ago = datetime.now() - timedelta(days=365)
    recent_dividends = dividends[dividends.index > one_year_ago]
    div = recent_dividends.sum()

if df.empty:
    print(f"No trading data found for {symbol} between {start_date.date()} and {end_date.date()}", file=sys.stderr)
else:
    # Fix: Localize comparison dates
    if df.index.tz is not None:
        start_date = start_date.tz_localize(df.index.tz)
        end_date = end_date.tz_localize(df.index.tz)

    df_filtered = df[(df.index >= start_date) & (df.index <= end_date)]

    if df_filtered.empty:
        print(f"No trading data found within range", file=sys.stderr)
    else:
        #print(df_filtered[["Open", "High", "Low", "Close", "Volume"]])
        for idx, row in df_filtered.iterrows():
            #print(f"{idx.date()} {row['Close']:.2f}")
            print(f"{symbol} {currency} {idx.strftime('%m/%d/%Y')} {row['Close']:.5f} {div:.5f}")
